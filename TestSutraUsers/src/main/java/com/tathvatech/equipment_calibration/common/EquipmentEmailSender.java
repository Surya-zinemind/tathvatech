package com.tathvatech.equipment_calibration.common;
import com.tathvatech.user.service.EmailServiceManager;
import com.tathvatech.common.common.ApplicationProperties;
import com.tathvatech.common.email.EmailMessageInfo;
import com.tathvatech.common.utils.ListStringUtil;
import com.tathvatech.user.OID.UserOID;
import com.tathvatech.equipment_calibration.utils.DateFormatter;
import com.tathvatech.user.common.UserContext;
import com.tathvatech.user.entity.User;
import com.tathvatech.user.enums.SiteRolesEnum;
import com.tathvatech.user.service.AccountService;
import com.tathvatech.user.service.AuthorizationManager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class EquipmentEmailSender
{
private static EmailServiceManager emailServiceManager;
    private static AuthorizationManager authorizationManager;
    private static AccountService accountService;

    public EquipmentEmailSender(AccountService accountService) {
        this.accountService = accountService;
    }

    /*
     * Create Equipment Email
     */
    public  void notifyEquipmentCreated(UserContext context, EquipmentBean equipmentBean) throws Exception
    {

        String html = generateCreateEmailBodyHtml();
        html = html.replace("{equipmentId}",
                (equipmentBean.getEquipmentId() != null) ? equipmentBean.getEquipmentId() : "Not assigned");
        html = html.replace("{createdUser}", equipmentBean.getCreatedBy().getDisplayText());
        DateFormatter dateTimeFormatter = DateFormatter.getInstance(context.getTimeZone());
        html = html.replace("{createdDate}", dateTimeFormatter.formatDate(equipmentBean.getCreatedDate()));
        StringBuffer calibrationCoordinators = new StringBuffer();
        String comma = "";

        List<User> calibrationcoordinators = authorizationManager.getUsersInRole(equipmentBean.getSiteOID(),
                SiteRolesEnum.CalibrationCoordinator);
        if (calibrationcoordinators != null)
        {
            for (User user : calibrationcoordinators)
            {
                calibrationCoordinators.append(comma).append(user.getDisplayString());
                comma = ", ";
            }
        }

        html = html.replace("{calibrationcoordinator}", calibrationCoordinators.toString());
        String text = generateEquipmentEmailBodyText();

        String subject = "New Equipment "
                .concat((equipmentBean.getEquipmentId() != null) ? equipmentBean.getEquipmentId() : "");
        if (equipmentBean.getLocationOID() != null)
        {
            subject.concat(" Raised from ").concat(equipmentBean.getLocationOID().getDisplayText());
        }
        sendEmailForEquipmentCreate(context, subject, text, html, equipmentBean);

    }

    public static String generateCreateEmailBodyHtml()
    {
        StringBuffer sb = new StringBuffer();
        try
        {
            sb.append("<font size='3'>Hi </font><br/><br/>");
            String applicationURL = ApplicationProperties.getPropertyFromConfig("config/server/url", null);
            if (applicationURL != null)
            {

                sb.append("A new Equipment <b> {equipmentId}</b>  has been created by ").append(
                        " {createdUser} on {createdDate} and is awaiting approval from calibration coordinator.<br/><br/>");
                sb.append("Thank You<br/>").append("TestSutra Support<br/>");

            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public static String generateEquipmentEmailBodyText()
    {

        StringBuffer sb = new StringBuffer();
        try
        {
            sb.append("Hi\t\n\t\n");
            sb.append("Please use an HTML enabled email reader to view this message.\n\n");
            sb.append("Thanks\t\nTestSutra Support\t\n\t\n");
            sb.append(
                    "Please do not respond to this email as this is auto-generated by TestSutra, If you need further assistance, please contact the concerned project coordinator \n\n\n");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public  void sendEmailForEquipmentCreate(UserContext context, String subject, String text, String html,
                                                   EquipmentBean equipmentBean) throws Exception
    {
        List<Integer> sentList = new ArrayList<>();
        List<String> userListArr = new ArrayList<String>();
        // email to creator.
        if (equipmentBean.getCreatedBy() != null)
        {
            User user = accountService.getUser(equipmentBean.getCreatedBy().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        /*
         * Email to calibration coordinator
         */
        List<User> calibrationCoordinators =authorizationManager.getUsersInRole(equipmentBean.getSiteOID(),
                SiteRolesEnum.CalibrationCoordinator);
        if (calibrationCoordinators != null)
        {
            for (User user : calibrationCoordinators)
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        if (userListArr != null && userListArr.size() > 0)
        {
            Object[] objuserListArr = userListArr.toArray();
            String[] userList = Arrays.copyOf(objuserListArr, objuserListArr.length, String[].class);
            EmailMessageInfo emailInfo = new EmailMessageInfo(ApplicationProperties.getEmailFromAddress(), null,
                    userList, subject, text, html, null);
            emailServiceManager.scheduleEmail(emailInfo);
        }

    }

    /*
     * Approved Equipment
     */

    public static void notifyApprovedEquipment(UserContext context, EquipmentBean equipmentBean) throws Exception
    {
        String html = generateApprovedEmailBodyHtml();
        html = html.replace("{equipmentId}", equipmentBean.getEquipmentId());
        DateFormatter dateTimeFormatter = DateFormatter.getInstance(context.getTimeZone());
        html = html.replace("{approvedBy}", equipmentBean.getApprovedBy().getDisplayText());
        html = html.replace("{approvedDate}", dateTimeFormatter.formatDate(equipmentBean.getApprovedDate()));
        String text = generateEquipmentEmailBodyText();
        String subject = "Equipment ".concat(equipmentBean.getEquipmentId()).concat(" has been Approved.");
          sendEmailForEquipmentApproved(context, subject, text, html, equipmentBean);
    }

    public static String generateApprovedEmailBodyHtml()
    {
        StringBuffer sb = new StringBuffer();
        try
        {
            sb.append("<font size='3'>Hi </font><br/><br/>");

                String applicationURL = ApplicationProperties.getPropertyFromConfig("config/server/url", null);

            if (applicationURL != null)
            {
                sb.append("Equipment <b> {equipmentId}</b>  has been approved by ")
                        .append(" {approvedBy} on {approvedDate}.<br/><br/>");
                sb.append("Thank You<br/>").append("TestSutra Support<br/>");

            }

        }

        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public static void sendEmailForEquipmentApproved(UserContext context, String subject, String text, String html,
                                                     EquipmentBean equipmentBean) throws Exception
    {
        List<Integer> sentList = new ArrayList<>();
        List<String> userListArr = new ArrayList<String>();
        // email to creator.
        if (equipmentBean.getCreatedBy() != null)
        {
            User user =accountService.getUser(equipmentBean.getCreatedBy().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        // email to custodian.
        if (equipmentBean.getCustodianOID() != null)
        {
            User user = accountService.getUser(equipmentBean.getCustodianOID().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        /*
         * Email to calibration coordinator
         */
        List<User> calibrationCoordinator = authorizationManager.getUsersInRole(equipmentBean.getSiteOID(),
                SiteRolesEnum.CalibrationCoordinator);
        if (calibrationCoordinator != null)
        {
            for (User user : calibrationCoordinator)
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        if (userListArr != null && userListArr.size() > 0)
        {
            Object[] objuserListArr = userListArr.toArray();
            String[] userList = Arrays.copyOf(objuserListArr, objuserListArr.length, String[].class);
            EmailMessageInfo emailInfo = new EmailMessageInfo(ApplicationProperties.getEmailFromAddress(), null,
                    userList, subject, text, html, null);
            emailServiceManager.scheduleEmail(emailInfo);
        }

    }

    /*
     * Calibration added Email
     */
    public static void notifyCalibrationUpdated(UserContext context, EquipmentBean equipmentBean) throws Exception
    {

        String html = generateCalibrationEmailBodyHtml();
        html = html.replace("{equipmentId}", equipmentBean.getEquipmentId());
        DateFormatter dateTimeFormatter = DateFormatter.getInstance(context.getTimeZone());
        html = html.replace("{calibrationReferenceNo}",
                ListStringUtil.showString(equipmentBean.getCalibrationBean().getCalibrationReferenceNo()));
        html = html.replace("{calibrationStatus}",
                equipmentBean.getCalibrationBean().getCalibationStatus().getDisplayString());
        html = html.replace("{calibratedBy}", equipmentBean.getCalibrationBean().getCreatedBy().getDisplayText());
        html = html.replace("{calibrationDate}",
                dateTimeFormatter.formatDate(equipmentBean.getCalibrationBean().getCalibrationDate()));
        String text = generateEquipmentEmailBodyText();
        String subject = "A new calibration has been made on Equipment ".concat(equipmentBean.getEquipmentId())
                .concat(".");
        sendEmailForCalibration(context, subject, text, html, equipmentBean);

    }

    public static String generateCalibrationEmailBodyHtml()
    {
        StringBuffer sb = new StringBuffer();
        try
        {
            sb.append("<font size='3'>Hi </font><br/><br/>");
            String applicationURL = ApplicationProperties.getPropertyFromConfig("config/server/url", null);
            if (applicationURL != null)
            {
                sb.append(" A new calibration entry has been made on equipment <b> {equipmentId}</b>.<br/>")
                        .append("Calibration ref: {calibrationReferenceNo}<br/>")
                        .append("Status: {calibrationStatus}<br/>").append("Calibration date: {calibrationDate}<br/>")
                        .append("Calibration by: {calibratedBy}.").append("<br/><br/>");
            }

            sb.append("Thank You<br/>").append("TestSutra Support<br/>");

        }

        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public static void sendEmailForCalibration(UserContext context, String subject, String text, String html,
                                               EquipmentBean equipmentBean) throws Exception
    {
        List<Integer> sentList = new ArrayList<>();
        List<String> userListArr = new ArrayList<String>();

        // email to creator.
        if (equipmentBean.getCreatedBy() != null)
        {
            User user = accountService.getUser(equipmentBean.getCreatedBy().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        // email to calibrated user.
        if (equipmentBean.getCalibrationBean() != null && equipmentBean.getCalibrationBean().getCreatedBy() != null)
        {
            User user = accountService.getUser(equipmentBean.getCalibrationBean().getCreatedBy().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        // email to custodian.
        if (equipmentBean.getCustodianOID() != null)
        {
            User user = accountService.getUser(equipmentBean.getCustodianOID().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        /*
         * Email to calibration coordinator
         */
        List<User> siteAdmins = authorizationManager.getUsersInRole(equipmentBean.getSiteOID(),
                SiteRolesEnum.CalibrationCoordinator);
        if (siteAdmins != null)
        {
            for (User user : siteAdmins)
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        if (userListArr != null && userListArr.size() > 0)
        {
            Object[] objuserListArr = userListArr.toArray();
            String[] userList = Arrays.copyOf(objuserListArr, objuserListArr.length, String[].class);
            EmailMessageInfo emailInfo = new EmailMessageInfo(ApplicationProperties.getEmailFromAddress(), null,
                    userList, subject, text, html, null);
            emailServiceManager.scheduleEmail(emailInfo);
        }

    }

    /*
     * Custodian change
     */
    public void notifyCustodianUpdate(UserContext context, EquipmentBean equipmentBean,
                                      UserOID previousCustodian) throws Exception
    {

        String html = generateCustodianEmailBodyHtml();
        html = html.replace("{equipmentId}", equipmentBean.getEquipmentId());
        html = html.replace("{prevCustodian}", previousCustodian.getDisplayText());
        html = html.replace("{custodian}", equipmentBean.getCustodianOID().getDisplayText());
        String text = generateEquipmentEmailBodyText();
        String subject = "Equipment ".concat(equipmentBean.getEquipmentId()).concat(" Custodian Changed.");
        sendEmailForCustodianChange(context, subject, text, html, equipmentBean, previousCustodian);

    }

    public static String generateCustodianEmailBodyHtml()
    {
        StringBuffer sb = new StringBuffer();
        try
        {
            sb.append("<font size='3'>Hi </font><br/><br/>");
            String applicationURL = ApplicationProperties.getPropertyFromConfig("config/server/url", null);
            if (applicationURL != null)
            {

                sb.append("Here is your Equipment status email from TestSutra, &nbsp; <a href=\" " + applicationURL
                        + "\">Click here to go to TestSutra website.</a><br/><br/>");
                sb.append(
                        "In Equipment <b> {equipmentId}</b>, custodian changed for the given part from <b>{prevCustodian}</b>  to <b>{custodian}</b>.<br/><br/>.");
            }

            sb.append("Thanks<br/>TestSutra Support<br/><br/>");

        }

        catch (Exception e)
        {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public  void sendEmailForCustodianChange(UserContext context, String subject, String text, String html,
                                                   EquipmentBean equipmentBean, UserOID previousCustodian) throws Exception
    {
        List<Integer> sentList = new ArrayList<>();
        List<String> userListArr = new ArrayList<String>();
        // email to creator.
        if (equipmentBean.getCreatedBy() != null)
        {
            User user = accountService.getUser(equipmentBean.getCreatedBy().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        // email to custodian.
        if (equipmentBean.getCustodianOID() != null)
        {
            User user = accountService.getUser(equipmentBean.getCustodianOID().getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        /*
         * Email to calibration coordinator
         */
        List<User> calibrationCoordinator =authorizationManager.getUsersInRole(equipmentBean.getSiteOID(),
                SiteRolesEnum.CalibrationCoordinator);
        if (calibrationCoordinator != null)
        {
            for (User user : calibrationCoordinator)
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }
        if (previousCustodian != null)
        {
            User user = accountService.getUser(previousCustodian.getPk());
            if (user != null && user.getEmail() != null && User.STATUS_ACTIVE.equals(user.getStatus()))
            {
                if (!(sentList.contains(user.getPk())))
                {
                    sentList.add((int) user.getPk());
                    userListArr.add(user.getEmail());
                }
            }
        }

        if (userListArr != null && userListArr.size() > 0)
        {
            Object[] objuserListArr = userListArr.toArray();
            String[] userList = Arrays.copyOf(objuserListArr, objuserListArr.length, String[].class);
            EmailMessageInfo emailInfo = new EmailMessageInfo(ApplicationProperties.getEmailFromAddress(), null,
                    userList, subject, text, html, null);
            emailServiceManager.scheduleEmail(emailInfo);
        }

    }

}
